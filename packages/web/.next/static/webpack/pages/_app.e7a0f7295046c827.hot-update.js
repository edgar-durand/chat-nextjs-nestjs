"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/contexts/ChatContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/ChatContext.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatProvider: function() { return /* binding */ ChatProvider; },\n/* harmony export */   useChat: function() { return /* binding */ useChat; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"../../node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! socket.io-client */ \"../../node_modules/socket.io-client/build/esm/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ \"../../node_modules/axios/index.js\");\n/* harmony import */ var _AuthContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AuthContext */ \"./src/contexts/AuthContext.tsx\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"../../node_modules/next/dist/build/polyfills/process.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\nconst ChatContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    activeChat: null,\n    messages: [],\n    rooms: [],\n    onlineUsers: {},\n    users: [],\n    typingUsers: {},\n    isLoading: true,\n    setActiveChat: ()=>{},\n    sendMessage: async ()=>{},\n    createRoom: async ()=>({\n            _id: \"\",\n            name: \"\",\n            creator: {\n                _id: \"\",\n                name: \"\",\n                email: \"\",\n                avatar: \"\"\n            },\n            members: [],\n            isPrivate: false,\n            createdAt: \"\"\n        }),\n    joinRoom: async ()=>{},\n    leaveRoom: async ()=>{},\n    setTyping: ()=>{}\n});\nconst useChat = ()=>{\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ChatContext);\n};\n_s(useChat, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ChatProvider = (param)=>{\n    let { children } = param;\n    _s1();\n    const { user: authUser, isAuthenticated } = (0,_AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth)();\n    const [activeChat, setActiveChat] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [rooms, setRooms] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [users, setUsers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [onlineUsers, setOnlineUsers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [typingUsers, setTypingUsers] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [socketConnected, setSocketConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const socketRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const currentActiveChatRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:3001\";\n    const user = authUser ? {\n        _id: authUser.id,\n        ...authUser\n    } : null;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        var _socketRef_current;\n        if (!isAuthenticated || !user) {\n            if (socketRef.current) {\n                socketRef.current.disconnect();\n                socketRef.current = null;\n                setSocketConnected(false);\n            }\n            return;\n        }\n        const token = localStorage.getItem(\"token\");\n        if (!token) return;\n        if ((_socketRef_current = socketRef.current) === null || _socketRef_current === void 0 ? void 0 : _socketRef_current.connected) {\n            return;\n        }\n        if (socketRef.current) {\n            socketRef.current.disconnect();\n        }\n        socketRef.current = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_2__.io)(API_URL, {\n            auth: {\n                token\n            },\n            withCredentials: true,\n            reconnectionAttempts: 5,\n            reconnectionDelay: 1000,\n            timeout: 10000\n        });\n        socketRef.current.on(\"connect\", ()=>{\n            console.log(\"Socket connected\");\n            setSocketConnected(true);\n        });\n        socketRef.current.on(\"connect_error\", (error)=>{\n            console.error(\"Socket connection error:\", error);\n            setSocketConnected(false);\n        });\n        socketRef.current.on(\"new_message\", (message)=>{\n            if (!currentActiveChatRef.current) return;\n            if (currentActiveChatRef.current.type === \"private\" && (message.sender._id === currentActiveChatRef.current.id && message.recipient === user._id || message.sender._id === user._id && message.recipient === currentActiveChatRef.current.id) || currentActiveChatRef.current.type === \"room\" && message.room === currentActiveChatRef.current.id) {\n                setMessages((prev)=>[\n                        ...prev,\n                        message\n                    ]);\n            }\n        });\n        socketRef.current.on(\"user_status_change\", (param)=>{\n            let { userId, isOnline } = param;\n            setOnlineUsers((prev)=>({\n                    ...prev,\n                    [userId]: isOnline\n                }));\n        });\n        socketRef.current.on(\"typing_indicator\", (data)=>{\n            if (!currentActiveChatRef.current) return;\n            if (currentActiveChatRef.current.type === \"private\" && data.senderId === currentActiveChatRef.current.id || currentActiveChatRef.current.type === \"room\" && data.roomId === currentActiveChatRef.current.id) {\n                setTypingUsers((prev)=>({\n                        ...prev,\n                        [data.userId]: data.isTyping\n                    }));\n            }\n        });\n        socketRef.current.on(\"message_read\", (param)=>{\n            let { messageId } = param;\n            setMessages((prev)=>prev.map((msg)=>msg._id === messageId ? {\n                        ...msg,\n                        isRead: true\n                    } : msg));\n        });\n        socketRef.current.on(\"disconnect\", ()=>{\n            console.log(\"Socket disconnected\");\n            setSocketConnected(false);\n        });\n        return ()=>{\n            leaveActiveChat();\n            if (socketRef.current) {\n                socketRef.current.disconnect();\n                socketRef.current = null;\n                setSocketConnected(false);\n            }\n        };\n    }, [\n        isAuthenticated,\n        user,\n        API_URL\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        currentActiveChatRef.current = activeChat;\n    }, [\n        activeChat\n    ]);\n    const leaveActiveChat = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!socketRef.current || !currentActiveChatRef.current) return;\n        try {\n            if (currentActiveChatRef.current.type === \"private\") {\n                socketRef.current.emit(\"leave_room\", {\n                    userId: currentActiveChatRef.current.id\n                });\n            } else {\n                socketRef.current.emit(\"leave_room\", {\n                    roomId: currentActiveChatRef.current.id\n                });\n            }\n        } catch (error) {\n            console.error(\"Error leaving room:\", error);\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!isAuthenticated) {\n            setIsLoading(false);\n            return;\n        }\n        const fetchInitialData = async ()=>{\n            try {\n                setIsLoading(true);\n                const [usersResponse, roomsResponse] = await Promise.all([\n                    axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get(\"\".concat(API_URL, \"/users\")),\n                    axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get(\"\".concat(API_URL, \"/rooms/my\"))\n                ]);\n                setUsers(usersResponse.data);\n                setRooms(roomsResponse.data);\n                const initialOnlineStatus = {};\n                usersResponse.data.forEach((user)=>{\n                    initialOnlineStatus[user._id] = user.isOnline || false;\n                });\n                setOnlineUsers(initialOnlineStatus);\n            } catch (error) {\n                console.error(\"Error fetching initial data:\", error);\n            } finally{\n                setIsLoading(false);\n            }\n        };\n        fetchInitialData();\n    }, [\n        isAuthenticated,\n        API_URL\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!activeChat || !isAuthenticated || !socketConnected) {\n            setMessages([]);\n            return;\n        }\n        leaveActiveChat();\n        const fetchMessages = async ()=>{\n            try {\n                setIsLoading(true);\n                let response;\n                if (activeChat.type === \"private\") {\n                    var _socketRef_current;\n                    response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get(\"\".concat(API_URL, \"/chats/direct/\").concat(activeChat.id));\n                    if ((_socketRef_current = socketRef.current) === null || _socketRef_current === void 0 ? void 0 : _socketRef_current.connected) {\n                        socketRef.current.emit(\"join_room\", {\n                            userId: activeChat.id\n                        });\n                    }\n                } else {\n                    var _socketRef_current1;\n                    response = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].get(\"\".concat(API_URL, \"/chats/room/\").concat(activeChat.id));\n                    if ((_socketRef_current1 = socketRef.current) === null || _socketRef_current1 === void 0 ? void 0 : _socketRef_current1.connected) {\n                        socketRef.current.emit(\"join_room\", {\n                            roomId: activeChat.id\n                        });\n                    }\n                }\n                setMessages(response.data);\n            } catch (error) {\n                console.error(\"Error fetching messages:\", error);\n            } finally{\n                setIsLoading(false);\n            }\n        };\n        fetchMessages();\n        setTypingUsers({});\n    }, [\n        activeChat,\n        isAuthenticated,\n        API_URL,\n        socketConnected,\n        leaveActiveChat\n    ]);\n    const sendMessage = async (content)=>{\n        var _socketRef_current;\n        if (!activeChat || !user || !((_socketRef_current = socketRef.current) === null || _socketRef_current === void 0 ? void 0 : _socketRef_current.connected)) return;\n        try {\n            const messageData = {\n                content,\n                ...activeChat.type === \"private\" ? {\n                    recipientId: activeChat.id\n                } : {\n                    roomId: activeChat.id\n                }\n            };\n            socketRef.current.emit(\"send_message\", messageData);\n        } catch (error) {\n            console.error(\"Error sending message:\", error);\n            throw error;\n        }\n    };\n    const createRoom = async function(name) {\n        let description = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\", isPrivate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false, members = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : [];\n        try {\n            const { data } = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].post(\"\".concat(API_URL, \"/rooms\"), {\n                name,\n                description,\n                isPrivate,\n                members\n            });\n            setRooms((prev)=>[\n                    ...prev,\n                    data\n                ]);\n            return data;\n        } catch (error) {\n            console.error(\"Error creating room:\", error);\n            throw error;\n        }\n    };\n    const joinRoom = async (roomId)=>{\n        if (!user) return;\n        try {\n            const { data } = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"].post(\"\".concat(API_URL, \"/rooms/\").concat(roomId, \"/members/\").concat(user._id));\n            setRooms((prev)=>prev.map((room)=>room._id === roomId ? data : room));\n        } catch (error) {\n            console.error(\"Error joining room:\", error);\n            throw error;\n        }\n    };\n    const leaveRoom = async (roomId)=>{\n        if (!user) return;\n        try {\n            const { data } = await axios__WEBPACK_IMPORTED_MODULE_4__[\"default\"][\"delete\"](\"\".concat(API_URL, \"/rooms/\").concat(roomId, \"/members/\").concat(user._id));\n            setRooms((prev)=>prev.map((room)=>room._id === roomId ? data : room));\n            if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.type) === \"room\" && activeChat.id === roomId) {\n                setActiveChat(null);\n            }\n        } catch (error) {\n            console.error(\"Error leaving room:\", error);\n            throw error;\n        }\n    };\n    const setTyping = (isTyping)=>{\n        var _socketRef_current;\n        if (!activeChat || !((_socketRef_current = socketRef.current) === null || _socketRef_current === void 0 ? void 0 : _socketRef_current.connected)) return;\n        const typingData = {\n            isTyping,\n            ...activeChat.type === \"private\" ? {\n                recipientId: activeChat.id\n            } : {\n                roomId: activeChat.id\n            }\n        };\n        socketRef.current.emit(\"typing\", typingData);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ChatContext.Provider, {\n        value: {\n            activeChat,\n            messages,\n            rooms,\n            onlineUsers,\n            users,\n            typingUsers,\n            isLoading,\n            setActiveChat,\n            sendMessage,\n            createRoom,\n            joinRoom,\n            leaveRoom,\n            setTyping\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/edgardurand/Documents/REPOS/chat/packages/web/src/contexts/ChatContext.tsx\",\n        lineNumber: 359,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(ChatProvider, \"mxBoIxSSXOYOl9W5WWPQPGV+lGE=\", false, function() {\n    return [\n        _AuthContext__WEBPACK_IMPORTED_MODULE_3__.useAuth\n    ];\n});\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YnBhY2s6Ly9fTl9FLy4vc3JjL2NvbnRleHRzL0NoYXRDb250ZXh0LnRzeD8wYjU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW8sIFNvY2tldCB9IGZyb20gJ3NvY2tldC5pby1jbGllbnQnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IHVzZUF1dGggfSBmcm9tICcuL0F1dGhDb250ZXh0JztcblxuaW50ZXJmYWNlIFVzZXIge1xuICBfaWQ6IHN0cmluZztcbiAgaWQ/OiBzdHJpbmc7IFxuICBuYW1lOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGF2YXRhcjogc3RyaW5nO1xuICBpc09ubGluZT86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBNZXNzYWdlIHtcbiAgX2lkOiBzdHJpbmc7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgc2VuZGVyOiBVc2VyO1xuICByZWNpcGllbnQ/OiBzdHJpbmc7XG4gIHJvb20/OiBzdHJpbmc7XG4gIGlzUmVhZDogYm9vbGVhbjtcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBSb29tIHtcbiAgX2lkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIGltYWdlPzogc3RyaW5nO1xuICBjcmVhdG9yOiBVc2VyO1xuICBtZW1iZXJzOiBVc2VyW107XG4gIGlzUHJpdmF0ZTogYm9vbGVhbjtcbiAgY3JlYXRlZEF0OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBDaGF0Q29udGV4dFR5cGUge1xuICBhY3RpdmVDaGF0OiB7IHR5cGU6ICdwcml2YXRlJyB8ICdyb29tJywgaWQ6IHN0cmluZyB9IHwgbnVsbDtcbiAgbWVzc2FnZXM6IE1lc3NhZ2VbXTtcbiAgcm9vbXM6IFJvb21bXTtcbiAgb25saW5lVXNlcnM6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+O1xuICB1c2VyczogVXNlcltdO1xuICB0eXBpbmdVc2VyczogUmVjb3JkPHN0cmluZywgYm9vbGVhbj47XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgc2V0QWN0aXZlQ2hhdDogKGNoYXQ6IHsgdHlwZTogJ3ByaXZhdGUnIHwgJ3Jvb20nLCBpZDogc3RyaW5nIH0gfCBudWxsKSA9PiB2b2lkO1xuICBzZW5kTWVzc2FnZTogKGNvbnRlbnQ6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcbiAgY3JlYXRlUm9vbTogKG5hbWU6IHN0cmluZywgZGVzY3JpcHRpb24/OiBzdHJpbmcsIGlzUHJpdmF0ZT86IGJvb2xlYW4sIG1lbWJlcnM/OiBzdHJpbmdbXSkgPT4gUHJvbWlzZTxSb29tPjtcbiAgam9pblJvb206IChyb29tSWQ6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcbiAgbGVhdmVSb29tOiAocm9vbUlkOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XG4gIHNldFR5cGluZzogKGlzVHlwaW5nOiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5jb25zdCBDaGF0Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8Q2hhdENvbnRleHRUeXBlPih7XG4gIGFjdGl2ZUNoYXQ6IG51bGwsXG4gIG1lc3NhZ2VzOiBbXSxcbiAgcm9vbXM6IFtdLFxuICBvbmxpbmVVc2Vyczoge30sXG4gIHVzZXJzOiBbXSxcbiAgdHlwaW5nVXNlcnM6IHt9LFxuICBpc0xvYWRpbmc6IHRydWUsXG4gIHNldEFjdGl2ZUNoYXQ6ICgpID0+IHt9LFxuICBzZW5kTWVzc2FnZTogYXN5bmMgKCkgPT4ge30sXG4gIGNyZWF0ZVJvb206IGFzeW5jICgpID0+ICh7IF9pZDogJycsIG5hbWU6ICcnLCBjcmVhdG9yOiB7IF9pZDogJycsIG5hbWU6ICcnLCBlbWFpbDogJycsIGF2YXRhcjogJycgfSwgbWVtYmVyczogW10sIGlzUHJpdmF0ZTogZmFsc2UsIGNyZWF0ZWRBdDogJycgfSksXG4gIGpvaW5Sb29tOiBhc3luYyAoKSA9PiB7fSxcbiAgbGVhdmVSb29tOiBhc3luYyAoKSA9PiB7fSxcbiAgc2V0VHlwaW5nOiAoKSA9PiB7fSxcbn0pO1xuXG5leHBvcnQgY29uc3QgdXNlQ2hhdCA9ICgpID0+IHVzZUNvbnRleHQoQ2hhdENvbnRleHQpO1xuXG5leHBvcnQgY29uc3QgQ2hhdFByb3ZpZGVyOiBSZWFjdC5GQzx7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfT4gPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IHsgdXNlcjogYXV0aFVzZXIsIGlzQXV0aGVudGljYXRlZCB9ID0gdXNlQXV0aCgpO1xuICBjb25zdCBbYWN0aXZlQ2hhdCwgc2V0QWN0aXZlQ2hhdF0gPSB1c2VTdGF0ZTx7IHR5cGU6ICdwcml2YXRlJyB8ICdyb29tJywgaWQ6IHN0cmluZyB9IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFttZXNzYWdlcywgc2V0TWVzc2FnZXNdID0gdXNlU3RhdGU8TWVzc2FnZVtdPihbXSk7XG4gIGNvbnN0IFtyb29tcywgc2V0Um9vbXNdID0gdXNlU3RhdGU8Um9vbVtdPihbXSk7XG4gIGNvbnN0IFt1c2Vycywgc2V0VXNlcnNdID0gdXNlU3RhdGU8VXNlcltdPihbXSk7XG4gIGNvbnN0IFtvbmxpbmVVc2Vycywgc2V0T25saW5lVXNlcnNdID0gdXNlU3RhdGU8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KHt9KTtcbiAgY29uc3QgW3R5cGluZ1VzZXJzLCBzZXRUeXBpbmdVc2Vyc10gPSB1c2VTdGF0ZTxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oe30pO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG4gIGNvbnN0IFtzb2NrZXRDb25uZWN0ZWQsIHNldFNvY2tldENvbm5lY3RlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIFxuICBjb25zdCBzb2NrZXRSZWYgPSB1c2VSZWY8U29ja2V0IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IGN1cnJlbnRBY3RpdmVDaGF0UmVmID0gdXNlUmVmPHsgdHlwZTogJ3ByaXZhdGUnIHwgJ3Jvb20nLCBpZDogc3RyaW5nIH0gfCBudWxsPihudWxsKTtcbiAgXG4gIGNvbnN0IEFQSV9VUkwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDEnO1xuICBcbiAgY29uc3QgdXNlciA9IGF1dGhVc2VyID8ge1xuICAgIF9pZDogYXV0aFVzZXIuaWQsXG4gICAgLi4uYXV0aFVzZXJcbiAgfSA6IG51bGw7XG4gIFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghaXNBdXRoZW50aWNhdGVkIHx8ICF1c2VyKSB7XG4gICAgICBpZiAoc29ja2V0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgc29ja2V0UmVmLmN1cnJlbnQuZGlzY29ubmVjdCgpO1xuICAgICAgICBzb2NrZXRSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICAgIHNldFNvY2tldENvbm5lY3RlZChmYWxzZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyk7XG4gICAgXG4gICAgaWYgKCF0b2tlbikgcmV0dXJuO1xuICAgIFxuICAgIGlmIChzb2NrZXRSZWYuY3VycmVudD8uY29ubmVjdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGlmIChzb2NrZXRSZWYuY3VycmVudCkge1xuICAgICAgc29ja2V0UmVmLmN1cnJlbnQuZGlzY29ubmVjdCgpO1xuICAgIH1cbiAgICBcbiAgICBzb2NrZXRSZWYuY3VycmVudCA9IGlvKEFQSV9VUkwsIHtcbiAgICAgIGF1dGg6IHsgdG9rZW4gfSxcbiAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgIHJlY29ubmVjdGlvbkF0dGVtcHRzOiA1LFxuICAgICAgcmVjb25uZWN0aW9uRGVsYXk6IDEwMDAsXG4gICAgICB0aW1lb3V0OiAxMDAwMFxuICAgIH0pO1xuICAgIFxuICAgIHNvY2tldFJlZi5jdXJyZW50Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1NvY2tldCBjb25uZWN0ZWQnKTtcbiAgICAgIHNldFNvY2tldENvbm5lY3RlZCh0cnVlKTtcbiAgICB9KTtcbiAgICBcbiAgICBzb2NrZXRSZWYuY3VycmVudC5vbignY29ubmVjdF9lcnJvcicsIChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcignU29ja2V0IGNvbm5lY3Rpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgc2V0U29ja2V0Q29ubmVjdGVkKGZhbHNlKTtcbiAgICB9KTtcbiAgICBcbiAgICBzb2NrZXRSZWYuY3VycmVudC5vbignbmV3X21lc3NhZ2UnLCAobWVzc2FnZTogTWVzc2FnZSkgPT4ge1xuICAgICAgaWYgKCFjdXJyZW50QWN0aXZlQ2hhdFJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgICBcbiAgICAgIGlmIChcbiAgICAgICAgKGN1cnJlbnRBY3RpdmVDaGF0UmVmLmN1cnJlbnQudHlwZSA9PT0gJ3ByaXZhdGUnICYmIFxuICAgICAgICAgICgobWVzc2FnZS5zZW5kZXIuX2lkID09PSBjdXJyZW50QWN0aXZlQ2hhdFJlZi5jdXJyZW50LmlkICYmIG1lc3NhZ2UucmVjaXBpZW50ID09PSB1c2VyLl9pZCkgfHwgXG4gICAgICAgICAgIChtZXNzYWdlLnNlbmRlci5faWQgPT09IHVzZXIuX2lkICYmIG1lc3NhZ2UucmVjaXBpZW50ID09PSBjdXJyZW50QWN0aXZlQ2hhdFJlZi5jdXJyZW50LmlkKSkpIHx8XG4gICAgICAgIChjdXJyZW50QWN0aXZlQ2hhdFJlZi5jdXJyZW50LnR5cGUgPT09ICdyb29tJyAmJiBtZXNzYWdlLnJvb20gPT09IGN1cnJlbnRBY3RpdmVDaGF0UmVmLmN1cnJlbnQuaWQpXG4gICAgICApIHtcbiAgICAgICAgc2V0TWVzc2FnZXMocHJldiA9PiBbLi4ucHJldiwgbWVzc2FnZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIHNvY2tldFJlZi5jdXJyZW50Lm9uKCd1c2VyX3N0YXR1c19jaGFuZ2UnLCAoeyB1c2VySWQsIGlzT25saW5lIH0pID0+IHtcbiAgICAgIHNldE9ubGluZVVzZXJzKHByZXYgPT4gKHsgLi4ucHJldiwgW3VzZXJJZF06IGlzT25saW5lIH0pKTtcbiAgICB9KTtcbiAgICBcbiAgICBzb2NrZXRSZWYuY3VycmVudC5vbigndHlwaW5nX2luZGljYXRvcicsIChkYXRhOiB7IHVzZXJJZDogc3RyaW5nLCB1c2VyTmFtZTogc3RyaW5nLCBpc1R5cGluZzogYm9vbGVhbiwgcm9vbUlkPzogc3RyaW5nLCBzZW5kZXJJZD86IHN0cmluZyB9KSA9PiB7XG4gICAgICBpZiAoIWN1cnJlbnRBY3RpdmVDaGF0UmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICAgIFxuICAgICAgaWYgKFxuICAgICAgICAoY3VycmVudEFjdGl2ZUNoYXRSZWYuY3VycmVudC50eXBlID09PSAncHJpdmF0ZScgJiYgZGF0YS5zZW5kZXJJZCA9PT0gY3VycmVudEFjdGl2ZUNoYXRSZWYuY3VycmVudC5pZCkgfHxcbiAgICAgICAgKGN1cnJlbnRBY3RpdmVDaGF0UmVmLmN1cnJlbnQudHlwZSA9PT0gJ3Jvb20nICYmIGRhdGEucm9vbUlkID09PSBjdXJyZW50QWN0aXZlQ2hhdFJlZi5jdXJyZW50LmlkKVxuICAgICAgKSB7XG4gICAgICAgIHNldFR5cGluZ1VzZXJzKHByZXYgPT4gKHsgLi4ucHJldiwgW2RhdGEudXNlcklkXTogZGF0YS5pc1R5cGluZyB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgc29ja2V0UmVmLmN1cnJlbnQub24oJ21lc3NhZ2VfcmVhZCcsICh7IG1lc3NhZ2VJZCB9KSA9PiB7XG4gICAgICBzZXRNZXNzYWdlcyhwcmV2ID0+IFxuICAgICAgICBwcmV2Lm1hcChtc2cgPT4gXG4gICAgICAgICAgbXNnLl9pZCA9PT0gbWVzc2FnZUlkID8geyAuLi5tc2csIGlzUmVhZDogdHJ1ZSB9IDogbXNnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSk7XG4gICAgXG4gICAgc29ja2V0UmVmLmN1cnJlbnQub24oJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnU29ja2V0IGRpc2Nvbm5lY3RlZCcpO1xuICAgICAgc2V0U29ja2V0Q29ubmVjdGVkKGZhbHNlKTtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgbGVhdmVBY3RpdmVDaGF0KCk7XG4gICAgICBcbiAgICAgIGlmIChzb2NrZXRSZWYuY3VycmVudCkge1xuICAgICAgICBzb2NrZXRSZWYuY3VycmVudC5kaXNjb25uZWN0KCk7XG4gICAgICAgIHNvY2tldFJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgc2V0U29ja2V0Q29ubmVjdGVkKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbaXNBdXRoZW50aWNhdGVkLCB1c2VyLCBBUElfVVJMXSk7XG4gIFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGN1cnJlbnRBY3RpdmVDaGF0UmVmLmN1cnJlbnQgPSBhY3RpdmVDaGF0O1xuICB9LCBbYWN0aXZlQ2hhdF0pO1xuICBcbiAgY29uc3QgbGVhdmVBY3RpdmVDaGF0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghc29ja2V0UmVmLmN1cnJlbnQgfHwgIWN1cnJlbnRBY3RpdmVDaGF0UmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBcbiAgICB0cnkge1xuICAgICAgaWYgKGN1cnJlbnRBY3RpdmVDaGF0UmVmLmN1cnJlbnQudHlwZSA9PT0gJ3ByaXZhdGUnKSB7XG4gICAgICAgIHNvY2tldFJlZi5jdXJyZW50LmVtaXQoJ2xlYXZlX3Jvb20nLCB7IHVzZXJJZDogY3VycmVudEFjdGl2ZUNoYXRSZWYuY3VycmVudC5pZCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNvY2tldFJlZi5jdXJyZW50LmVtaXQoJ2xlYXZlX3Jvb20nLCB7IHJvb21JZDogY3VycmVudEFjdGl2ZUNoYXRSZWYuY3VycmVudC5pZCB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbGVhdmluZyByb29tOicsIGVycm9yKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGZldGNoSW5pdGlhbERhdGEgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBbdXNlcnNSZXNwb25zZSwgcm9vbXNSZXNwb25zZV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgYXhpb3MuZ2V0KGAke0FQSV9VUkx9L3VzZXJzYCksXG4gICAgICAgICAgYXhpb3MuZ2V0KGAke0FQSV9VUkx9L3Jvb21zL215YClcbiAgICAgICAgXSk7XG4gICAgICAgIFxuICAgICAgICBzZXRVc2Vycyh1c2Vyc1Jlc3BvbnNlLmRhdGEpO1xuICAgICAgICBzZXRSb29tcyhyb29tc1Jlc3BvbnNlLmRhdGEpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaW5pdGlhbE9ubGluZVN0YXR1czogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gPSB7fTtcbiAgICAgICAgdXNlcnNSZXNwb25zZS5kYXRhLmZvckVhY2goKHVzZXI6IFVzZXIpID0+IHtcbiAgICAgICAgICBpbml0aWFsT25saW5lU3RhdHVzW3VzZXIuX2lkXSA9IHVzZXIuaXNPbmxpbmUgfHwgZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRPbmxpbmVVc2Vycyhpbml0aWFsT25saW5lU3RhdHVzKTtcbiAgICAgICAgXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBpbml0aWFsIGRhdGE6JywgZXJyb3IpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGZldGNoSW5pdGlhbERhdGEoKTtcbiAgfSwgW2lzQXV0aGVudGljYXRlZCwgQVBJX1VSTF0pO1xuICBcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWFjdGl2ZUNoYXQgfHwgIWlzQXV0aGVudGljYXRlZCB8fCAhc29ja2V0Q29ubmVjdGVkKSB7XG4gICAgICBzZXRNZXNzYWdlcyhbXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGxlYXZlQWN0aXZlQ2hhdCgpO1xuICAgIFxuICAgIGNvbnN0IGZldGNoTWVzc2FnZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgICAgIGxldCByZXNwb25zZTtcbiAgICAgICAgXG4gICAgICAgIGlmIChhY3RpdmVDaGF0LnR5cGUgPT09ICdwcml2YXRlJykge1xuICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KGAke0FQSV9VUkx9L2NoYXRzL2RpcmVjdC8ke2FjdGl2ZUNoYXQuaWR9YCk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKHNvY2tldFJlZi5jdXJyZW50Py5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHNvY2tldFJlZi5jdXJyZW50LmVtaXQoJ2pvaW5fcm9vbScsIHsgdXNlcklkOiBhY3RpdmVDaGF0LmlkIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChgJHtBUElfVVJMfS9jaGF0cy9yb29tLyR7YWN0aXZlQ2hhdC5pZH1gKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoc29ja2V0UmVmLmN1cnJlbnQ/LmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgc29ja2V0UmVmLmN1cnJlbnQuZW1pdCgnam9pbl9yb29tJywgeyByb29tSWQ6IGFjdGl2ZUNoYXQuaWQgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzZXRNZXNzYWdlcyhyZXNwb25zZS5kYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIG1lc3NhZ2VzOicsIGVycm9yKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICBmZXRjaE1lc3NhZ2VzKCk7XG4gICAgXG4gICAgc2V0VHlwaW5nVXNlcnMoe30pO1xuICAgIFxuICB9LCBbYWN0aXZlQ2hhdCwgaXNBdXRoZW50aWNhdGVkLCBBUElfVVJMLCBzb2NrZXRDb25uZWN0ZWQsIGxlYXZlQWN0aXZlQ2hhdF0pO1xuICBcbiAgY29uc3Qgc2VuZE1lc3NhZ2UgPSBhc3luYyAoY29udGVudDogc3RyaW5nKSA9PiB7XG4gICAgaWYgKCFhY3RpdmVDaGF0IHx8ICF1c2VyIHx8ICFzb2NrZXRSZWYuY3VycmVudD8uY29ubmVjdGVkKSByZXR1cm47XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2VEYXRhID0ge1xuICAgICAgICBjb250ZW50LFxuICAgICAgICAuLi4oYWN0aXZlQ2hhdC50eXBlID09PSAncHJpdmF0ZScgPyB7IHJlY2lwaWVudElkOiBhY3RpdmVDaGF0LmlkIH0gOiB7IHJvb21JZDogYWN0aXZlQ2hhdC5pZCB9KSxcbiAgICAgIH07XG4gICAgICBcbiAgICAgIHNvY2tldFJlZi5jdXJyZW50LmVtaXQoJ3NlbmRfbWVzc2FnZScsIG1lc3NhZ2VEYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VuZGluZyBtZXNzYWdlOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcbiAgXG4gIGNvbnN0IGNyZWF0ZVJvb20gPSBhc3luYyAobmFtZTogc3RyaW5nLCBkZXNjcmlwdGlvbiA9ICcnLCBpc1ByaXZhdGUgPSBmYWxzZSwgbWVtYmVyczogc3RyaW5nW10gPSBbXSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLnBvc3QoYCR7QVBJX1VSTH0vcm9vbXNgLCB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBpc1ByaXZhdGUsXG4gICAgICAgIG1lbWJlcnMsXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgc2V0Um9vbXMocHJldiA9PiBbLi4ucHJldiwgZGF0YV0pO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIHJvb206JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9O1xuICBcbiAgY29uc3Qgam9pblJvb20gPSBhc3luYyAocm9vbUlkOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXVzZXIpIHJldHVybjtcbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5wb3N0KGAke0FQSV9VUkx9L3Jvb21zLyR7cm9vbUlkfS9tZW1iZXJzLyR7dXNlci5faWR9YCk7XG4gICAgICBcbiAgICAgIHNldFJvb21zKHByZXYgPT4gXG4gICAgICAgIHByZXYubWFwKHJvb20gPT4gXG4gICAgICAgICAgcm9vbS5faWQgPT09IHJvb21JZCA/IGRhdGEgOiByb29tXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGpvaW5pbmcgcm9vbTonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH07XG4gIFxuICBjb25zdCBsZWF2ZVJvb20gPSBhc3luYyAocm9vbUlkOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIXVzZXIpIHJldHVybjtcbiAgICBcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5kZWxldGUoYCR7QVBJX1VSTH0vcm9vbXMvJHtyb29tSWR9L21lbWJlcnMvJHt1c2VyLl9pZH1gKTtcbiAgICAgIFxuICAgICAgc2V0Um9vbXMocHJldiA9PiBcbiAgICAgICAgcHJldi5tYXAocm9vbSA9PiBcbiAgICAgICAgICByb29tLl9pZCA9PT0gcm9vbUlkID8gZGF0YSA6IHJvb21cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIFxuICAgICAgaWYgKGFjdGl2ZUNoYXQ/LnR5cGUgPT09ICdyb29tJyAmJiBhY3RpdmVDaGF0LmlkID09PSByb29tSWQpIHtcbiAgICAgICAgc2V0QWN0aXZlQ2hhdChudWxsKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbGVhdmluZyByb29tOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcbiAgXG4gIGNvbnN0IHNldFR5cGluZyA9IChpc1R5cGluZzogYm9vbGVhbikgPT4ge1xuICAgIGlmICghYWN0aXZlQ2hhdCB8fCAhc29ja2V0UmVmLmN1cnJlbnQ/LmNvbm5lY3RlZCkgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IHR5cGluZ0RhdGEgPSB7XG4gICAgICBpc1R5cGluZyxcbiAgICAgIC4uLihhY3RpdmVDaGF0LnR5cGUgPT09ICdwcml2YXRlJyA/IHsgcmVjaXBpZW50SWQ6IGFjdGl2ZUNoYXQuaWQgfSA6IHsgcm9vbUlkOiBhY3RpdmVDaGF0LmlkIH0pLFxuICAgIH07XG4gICAgXG4gICAgc29ja2V0UmVmLmN1cnJlbnQuZW1pdCgndHlwaW5nJywgdHlwaW5nRGF0YSk7XG4gIH07XG4gIFxuICByZXR1cm4gKFxuICAgIDxDaGF0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17e1xuICAgICAgYWN0aXZlQ2hhdCxcbiAgICAgIG1lc3NhZ2VzLFxuICAgICAgcm9vbXMsXG4gICAgICBvbmxpbmVVc2VycyxcbiAgICAgIHVzZXJzLFxuICAgICAgdHlwaW5nVXNlcnMsXG4gICAgICBpc0xvYWRpbmcsXG4gICAgICBzZXRBY3RpdmVDaGF0LFxuICAgICAgc2VuZE1lc3NhZ2UsXG4gICAgICBjcmVhdGVSb29tLFxuICAgICAgam9pblJvb20sXG4gICAgICBsZWF2ZVJvb20sXG4gICAgICBzZXRUeXBpbmcsXG4gICAgfX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DaGF0Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlQ2FsbGJhY2siLCJpbyIsImF4aW9zIiwidXNlQXV0aCIsIkNoYXRDb250ZXh0IiwiYWN0aXZlQ2hhdCIsIm1lc3NhZ2VzIiwicm9vbXMiLCJvbmxpbmVVc2VycyIsInVzZXJzIiwidHlwaW5nVXNlcnMiLCJpc0xvYWRpbmciLCJzZXRBY3RpdmVDaGF0Iiwic2VuZE1lc3NhZ2UiLCJjcmVhdGVSb29tIiwiX2lkIiwibmFtZSIsImNyZWF0b3IiLCJlbWFpbCIsImF2YXRhciIsIm1lbWJlcnMiLCJpc1ByaXZhdGUiLCJjcmVhdGVkQXQiLCJqb2luUm9vbSIsImxlYXZlUm9vbSIsInNldFR5cGluZyIsInVzZUNoYXQiLCJDaGF0UHJvdmlkZXIiLCJjaGlsZHJlbiIsInVzZXIiLCJhdXRoVXNlciIsImlzQXV0aGVudGljYXRlZCIsInNldE1lc3NhZ2VzIiwic2V0Um9vbXMiLCJzZXRVc2VycyIsInNldE9ubGluZVVzZXJzIiwic2V0VHlwaW5nVXNlcnMiLCJzZXRJc0xvYWRpbmciLCJzb2NrZXRDb25uZWN0ZWQiLCJzZXRTb2NrZXRDb25uZWN0ZWQiLCJzb2NrZXRSZWYiLCJjdXJyZW50QWN0aXZlQ2hhdFJlZiIsIkFQSV9VUkwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfQVBJX1VSTCIsImlkIiwiY3VycmVudCIsImRpc2Nvbm5lY3QiLCJ0b2tlbiIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjb25uZWN0ZWQiLCJhdXRoIiwid2l0aENyZWRlbnRpYWxzIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJyZWNvbm5lY3Rpb25EZWxheSIsInRpbWVvdXQiLCJvbiIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsIm1lc3NhZ2UiLCJ0eXBlIiwic2VuZGVyIiwicmVjaXBpZW50Iiwicm9vbSIsInByZXYiLCJ1c2VySWQiLCJpc09ubGluZSIsImRhdGEiLCJzZW5kZXJJZCIsInJvb21JZCIsImlzVHlwaW5nIiwibWVzc2FnZUlkIiwibWFwIiwibXNnIiwiaXNSZWFkIiwibGVhdmVBY3RpdmVDaGF0IiwiZW1pdCIsImZldGNoSW5pdGlhbERhdGEiLCJ1c2Vyc1Jlc3BvbnNlIiwicm9vbXNSZXNwb25zZSIsIlByb21pc2UiLCJhbGwiLCJnZXQiLCJpbml0aWFsT25saW5lU3RhdHVzIiwiZm9yRWFjaCIsImZldGNoTWVzc2FnZXMiLCJyZXNwb25zZSIsImNvbnRlbnQiLCJtZXNzYWdlRGF0YSIsInJlY2lwaWVudElkIiwiZGVzY3JpcHRpb24iLCJwb3N0IiwiZGVsZXRlIiwidHlwaW5nRGF0YSIsIlByb3ZpZGVyIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/contexts/ChatContext.tsx\n"));

/***/ })

});